package jsonlog

import (
	"encoding/json"
	"io"
	"runtime/debug"
	"sync"
	"time"
)

type LogLevel int8

const (
	LogInfo = iota
	LogError
	LogFatal
	LogOff
)

func (l LogLevel) String() string {
	switch l {
	case LogInfo:
		return "INFO"
	case LogError:
		return "ERROR"
	case LogFatal:
		return "FATAL"
	default:
		return ""
	}
}

type Logger struct {
	out      io.Writer
	minLevel LogLevel
	mu       sync.Mutex
}

func (l *Logger) New(out io.Writer, minlevel LogLevel) *Logger {
	return &Logger{
		out:      out,
		minLevel: minlevel,
	}
}

func (l *Logger) PrintInfo(message string, properties map[string]string) {
	l.print(LevelInfo, message, properties)
}

func (l *Logger) PrintError(err error, properties map[string]string) {
	l.print(LevelError, err.Error(), properties)
}

func (l *Logger) PrintFatal(message string, properties map[string]string) {
	l.print(LevelInfo, message, properties)
}

func (l *Logger) Print(level LogLevel, message string, properties map[string]string) (int, error) {
	if level < l.minLevel {
		return 0, nil
	}

	aux := struct {
		Level      string            `json:"level"`
		Time       string            `json:"time"`
		Message    string            `json:"message"`
		Properties map[string]string `json:"properties,omitempty"`
		Trace      string            `json:"trace,omitempty"`
	}{
		Level:      level.String(),
		Time:       time.Now().UTC().Format(time.RFC3339),
		Message:    message,
		Properties: properties,
	}

	if level >= LevelError {
		aux.Trace = string(debug.Stack())

	}

	var line []byte

	line, err := json.Marshal(aux)
	if err != nil {
		line = []byte(LevelError.String() + ": unable to marshal log message:" + err.Error())
	}
	l.mu.Lock()
	defer l.mu.Unlock()

	return l.out.Write(append(line, '\n'))
}

func (l *Logger) Write(message []byte) (n int, err error) {
	return l.print(LevelError, string(message), nil)
}

Usage:
customLogger:=jsonlog.New(os.Stdout, jsonlog.LevelInfo)
customLogger.PrintInfo("database connection pool established", nil) //Nil can be swapped with properties which is a map[string]string if available data is needed to be passed

customLogger.PrintInfo("database connection pool established", nil) //properties which is a map[string]string if available data is needed to be passed
customLogger.PrintError(err, map[string]string{
	"request_method": r.Method,
	"request_url": r.URL.String(),
})

To use with go's http.Server error loggin whivh only write tp the standardf logger

